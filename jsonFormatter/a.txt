or the agent-based language released in 2007, see Go! (programming language).
"Google Go" redirects here. For the computer program by Google to play the board game Go, see AlphaGo.
Go Golang.png
Go's mascot is a gopher, designed by Ren√©e French.[1]
Paradigm 	compiled, concurrent, imperative, structured
Designed by 	Robert Griesemer
Rob Pike
Ken Thompson
Developer 	Google LLC.
First appeared 	November 10, 2009; 8 years ago
Stable release 	
1.9.3 / January 22, 2018; 9 days ago[2]
Typing discipline 	strong, static, inferred, structural[3][4]
Implementation language 	Go, assembly language, previously C (gc); C++ (gccgo)
OS 	Linux, macOS, FreeBSD, NetBSD, OpenBSD,[5] Windows, Plan 9,[6] DragonFly BSD, Solaris
License 	BSD-style[7] + patent grant[8]
Filename extensions 	.go
Website 	golang.org
Major implementations
gc, gccgo
Influenced by
Alef, APL,[9] BCPL,[9] C, CSP, Limbo, Modula, Newsqueak, Oberon, occam, Pascal,[10] Smalltalk[11]
Influenced
Crystal

Go (often referred to as golang) is a programming language created at Google[12] in 2009 by Robert Griesemer, Rob Pike, and Ken Thompson.[10] It is a compiled, statically typed language in the tradition of Algol and C, with garbage collection, limited structural typing,[3] memory safety features and CSP-style concurrent programming features added.[13] The compiler and other language tools originally developed by Google are all free and open source.[14]

Contents

    1 History
    2 Language design
        2.1 Syntax
        2.2 Types
            2.2.1 Interface system
        2.3 Package system
        2.4 Concurrency: goroutines and channels
            2.4.1 Suitability for parallel programming
            2.4.2 Lack of race condition safety
        2.5 Omissions
        2.6 Criticism
    3 Conventions and code style
    4 Language tools
    5 Examples
        5.1 Hello world
        5.2 Concurrency example
    6 Projects using Go
    7 Reception
    8 Naming dispute
    9 See also
    10 Notes
    11 References
    12 External links

History

The language was announced in November 2009. It is used in some of Google's production systems, as well as by other firms.[15]

Two major implementations exist:

    Google's Go compiler, "gc", developed as open-source software. It targets various platforms including Linux, OS X, Windows, various BSD and Unix versions, and also (since 2015) mobile devices (including smartphones).[16]
    A second compiler, gccgo, is a GCC frontend.[17][18]

The "gc" toolchain has been self-hosting since version 1.5.[19]

Go originated as an experiment by Google engineers Robert Griesemer, Rob Pike, and Ken Thompson to design a new programming language that would resolve common criticisms of other languages while maintaining their positive characteristics. The developers envisaged the new language as:[20]

    statically typed, scalable to large systems (as Java and C++)
    productive and readable, without too many mandatory keywords and repetition[21] ("light on the page" like dynamic languages)
    not requiring integrated development environments, but supporting them well
    supporting networking and multiprocessing

In later interviews, all three of the language designers cited their shared dislike of C++'s complexity as a primary motivation for designing a new language.[22][23][24]

Google released Go 1.0 in March 2012.[25][26]
Language design

Go is recognizably in the tradition of C, but makes many changes to improve brevity, simplicity, and safety. Go consists of:

    A syntax and environment adopting patterns more common in dynamic languages:[27]
        Optional concise variable declaration and initialization through type inference (x := 0 not int x = 0; or var x = 0;).
        Fast compilation times.[28]
        Remote package management (go get)[29] and online package documentation.[30]
    Distinctive approaches to particular problems:
        Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement.
        An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance.
        A toolchain that, by default, produces statically linked native binaries without external dependencies.
    A desire to keep the language specification simple enough to hold in a programmer's head,[31] in part by omitting features common to similar languages.

Syntax

Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := "Hello, world!", without specifying the types of variables. This contrasts with C's int i = 3; and const char *s = "Hello, world!";. Semicolons still terminate statements, but are implicit when the end of a line occurs. Functions may return multiple values, and returning a result, err pair is the conventional way a function indicates an error to its caller in Go.[a] Go adds literal syntaxes for initializing struct parameters by name, and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels.[citation needed]
Types
Go has a number of built-in types, including numeric ones (byte, int64, float32, etc.), booleans, and character strings (string). Strings are immutable; b
